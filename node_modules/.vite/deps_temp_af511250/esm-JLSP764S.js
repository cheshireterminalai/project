import {
  require_eventemitter3
} from "./chunk-AD6JOGMB.js";
import {
  Message,
  PublicKey,
  SIGNATURE_LENGTH_IN_BYTES,
  Transaction,
  init_esm_browser,
  init_index_browser_esm,
  v4_default
} from "./chunk-NUB6R5RU.js";
import {
  require_safe_buffer
} from "./chunk-7QQYEK5K.js";
import "./chunk-OJ46EPHK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-MVEJMUOB.js";

// node_modules/@strike-protocols/solana-wallet-adapter/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@strike-protocols/solana-wallet-adapter/node_modules/base-x/src/index.js"(exports, module) {
    "use strict";
    var _Buffer = require_safe_buffer().Buffer;
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) {
          source = _Buffer.from(source);
        }
        if (!_Buffer.isBuffer(source)) {
          throw new TypeError("Expected Buffer");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return _Buffer.alloc(0);
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (psz < source.length) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0, 0, zeroes);
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode,
        decodeUnsafe,
        decode
      };
    }
    module.exports = base;
  }
});

// node_modules/@strike-protocols/solana-wallet-adapter/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@strike-protocols/solana-wallet-adapter/node_modules/bs58/index.js"(exports, module) {
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET);
  }
});

// node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/strikewallet.js
init_index_browser_esm();
var import_bs58 = __toESM(require_bs58(), 1);
init_esm_browser();
var import_eventemitter3 = __toESM(require_eventemitter3(), 1);
var DEFAULT_SIGNATURE_BUFFER = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);
var StrikeWallet = class extends import_eventemitter3.EventEmitter {
  constructor() {
    super();
    this.url = "https://wallet.strikeprotocols.com";
    this.cleanUp = () => {
      [...this._timers].forEach((t) => this.clearTimer(t));
      const wallet = this._wallet;
      if (wallet) {
        wallet.close();
      }
      this._wallet = null;
      this.emit("disconnected");
    };
    this.clearTimer = (timer) => {
      this._timers = this._timers.filter((t) => t != timer);
      window.clearInterval(timer);
    };
    this.instructionsToSerializableInstructions = (instructions) => instructions.map((i) => {
      return {
        "programId": i.programId.toBase58(),
        "accountMetas": i.keys.map((k) => {
          return {
            address: k.pubkey.toBase58(),
            signer: k.isSigner,
            writable: k.isWritable
          };
        }),
        "data": window.btoa(String.fromCharCode(...i.data))
      };
    });
    this.handleWalletMessage = (data) => {
      var _a, _b, _c;
      if (data.type == "connected") {
        this._connecting = false;
        if (!data.error) {
          this.isLoggedIn = true;
          if ((_a = data.connected) === null || _a === void 0 ? void 0 : _a.publicKey) {
            this._publicKey = new PublicKey(data.connected.publicKey);
          }
        }
      } else if (["sendTransaction", "sendFinalTransaction"].includes(data.type)) {
        const transactionIdentifier = (_b = data.sendTransaction) === null || _b === void 0 ? void 0 : _b.identifier;
        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {
          if (data.error) {
            this._pendingTransactionErrors[transactionIdentifier] = { message: data.error };
          } else {
            this._pendingTransactions[transactionIdentifier] = data.sendTransaction || null;
          }
        }
      } else if (data.type == "signTransaction") {
        const transactionIdentifier = (_c = data.signTransaction) === null || _c === void 0 ? void 0 : _c.identifier;
        if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {
          if (data.error) {
            this._pendingTransactionErrors[transactionIdentifier] = { message: data.error };
          } else {
            this._pendingTransactions[transactionIdentifier] = data.signTransaction || null;
          }
        }
      }
    };
    this.isLoggedIn = false;
    this._pendingTransactions = {};
    this._pendingTransactionErrors = {};
    this._timers = [];
    this._wallet = null;
    this._connecting = false;
    this._publicKey = null;
    window.addEventListener("message", (e) => {
      this.handleWalletMessage(e.data);
    });
  }
  async connect(url) {
    try {
      this.url = url || this.url;
      const origin = encodeURIComponent(window.location.origin);
      const connectUrl = `${this.url}/connect?origin=${origin}`;
      this._connecting = true;
      this._wallet = window.open(connectUrl, `strike-wallet-${origin}`, "height=900,width=800,menubar=no,status=no,toolbar=no");
      if (!this._wallet) {
        this._connecting = false;
        throw new Error("Unable to connect to wallet");
      }
      this._timers.push(window.setInterval(() => {
        if (this._wallet.closed) {
          this.cleanUp();
        } else if (this._wallet) {
          this._wallet.postMessage({ type: "heartbeat" }, this.url);
        }
      }, 100));
      return new Promise((resolve, reject) => {
        const timer = window.setInterval(() => {
          if (this.isLoggedIn && this._publicKey) {
            this.clearTimer(timer);
            resolve(this._publicKey);
          } else if (!this.isLoggedIn && !this._connecting) {
            this.clearTimer(timer);
            reject(new Error("Unable to connect to Strike"));
          }
        }, 100);
        this._timers.push(timer);
      });
    } catch (error) {
      throw error;
    }
  }
  async signTransaction(transaction) {
    this.verifyCanSignRequests([transaction]);
    try {
      return this.signOneTransaction(transaction);
    } catch (error) {
      throw error;
    }
  }
  async signAllTransactions(transactions) {
    this.verifyCanSignRequests(transactions);
    try {
      return this.signMultipleTransactions(transactions);
    } catch (error) {
      throw error;
    }
  }
  async sendTransaction(transaction, connection, options) {
    try {
      const wallet = this._wallet;
      if (!wallet)
        throw new Error("Not Connected");
      const transactionIdentifier = v4_default();
      this._pendingTransactions[transactionIdentifier] = null;
      const signers = options ? options.signers : void 0;
      if (signers && signers.length > 0) {
        return new Promise((resolve, reject) => {
          this.signOneTransaction(transaction, transactionIdentifier).then((walletTransaction) => {
            this._pendingTransactions[transactionIdentifier] = null;
            (signers === null || signers === void 0 ? void 0 : signers.length) && walletTransaction.partialSign(...signers);
            wallet.postMessage({
              type: "sendFinalTransaction",
              sendFinalTransaction: {
                transactionIdentifier,
                signaturePubkeyPairs: walletTransaction.signatures.filter((sp) => sp.signature != null).map((sp) => {
                  return {
                    "pubkey": sp.publicKey.toBase58(),
                    "signature": sp.signature.toString("base64")
                  };
                })
              }
            }, this.url);
            const timer = window.setInterval(() => {
              const pendingTransaction = this._pendingTransactions[transactionIdentifier];
              const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];
              if (pendingTransaction != null || pendingTransactionError != null) {
                this.clearTimer(timer);
                pendingTransaction && resolve(pendingTransaction.signature);
                pendingTransactionError && reject(pendingTransactionError);
              }
            }, 100);
            this._timers.push(timer);
          }).catch((error) => {
            reject(error);
            throw error;
          });
        });
      } else {
        const instructions = this.instructionsToSerializableInstructions(transaction.instructions);
        return new Promise((resolve, reject) => {
          wallet.postMessage({
            type: "sendTransaction",
            sendTransaction: { instructions, transactionIdentifier }
          }, this.url);
          const timer = window.setInterval(() => {
            const pendingTransaction = this._pendingTransactions[transactionIdentifier];
            const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];
            if (pendingTransaction != null || pendingTransactionError != null) {
              this.clearTimer(timer);
              pendingTransaction && resolve(pendingTransaction.signature);
              pendingTransactionError && reject(pendingTransactionError);
            }
          }, 100);
          this._timers.push(timer);
        });
      }
    } catch (error) {
      throw error;
    }
  }
  buildTransaction(pendingTransaction) {
    let message = Message.from(Buffer.from(Uint8Array.from(window.atob(pendingTransaction.message), (c) => c.charCodeAt(0))));
    return Transaction.populate(message, Array.from({ length: message.header.numRequiredSignatures }, (_v, i) => {
      let sigPubkeyPair = pendingTransaction.signatures.find((s) => s.pubkey == message.accountKeys[i].toBase58());
      return import_bs58.default.encode(sigPubkeyPair ? Buffer.from(Uint8Array.from(window.atob(sigPubkeyPair.signature), (c) => c.charCodeAt(0))) : DEFAULT_SIGNATURE_BUFFER);
    }));
  }
  verifyCanSignRequests(transactions) {
    transactions.forEach((transaction) => {
      if (transaction.signatures.some((s) => s.signature != null)) {
        throw new Error("Strike does not support this signing mode");
      }
    });
  }
  signOneTransaction(transaction, transactionIdentifier = v4_default()) {
    const wallet = this._wallet;
    if (!wallet)
      throw new Error("Not Connected");
    const instructions = this.instructionsToSerializableInstructions(transaction.instructions);
    this._pendingTransactions[transactionIdentifier] = null;
    return new Promise((resolve, reject) => {
      wallet.postMessage({ type: "signTransaction", signTransaction: { instructions, transactionIdentifier } }, this.url);
      const timer = window.setInterval(() => {
        const pendingTransaction = this._pendingTransactions[transactionIdentifier];
        const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];
        if (pendingTransaction != null || pendingTransactionError != null) {
          this.clearTimer(timer);
          pendingTransaction && resolve(this.buildTransaction(pendingTransaction));
          pendingTransactionError && reject(pendingTransactionError);
        }
      }, 100);
      this._timers.push(timer);
    });
  }
  signMultipleTransactions(transactions) {
    const wallet = this._wallet;
    if (!wallet)
      throw new Error("Not Connected");
    const serializedTransactions = transactions.map((t) => {
      return {
        instructions: this.instructionsToSerializableInstructions(t.instructions),
        transactionIdentifier: v4_default()
      };
    });
    const transactionIdentifiers = serializedTransactions.map((t) => t.transactionIdentifier);
    transactionIdentifiers.forEach((transactionIdentifier) => this._pendingTransactions[transactionIdentifier] = null);
    return new Promise((resolve, reject) => {
      wallet.postMessage({ type: "signAllTransactions", signAllTransactions: { transactions: serializedTransactions } }, this.url);
      const timer = window.setInterval(() => {
        const pendingTransactions = transactionIdentifiers.map((txId) => this._pendingTransactions[txId]);
        const pendingTransactionErrors = transactionIdentifiers.map((txId) => this._pendingTransactionErrors[txId]);
        if (pendingTransactions.every((t) => t != null)) {
          this.clearTimer(timer);
          resolve(pendingTransactions.map((pt) => this.buildTransaction(pt)));
        } else if (pendingTransactionErrors.some((e) => e != null)) {
          this.clearTimer(timer);
          reject(pendingTransactionErrors.find((e) => e != null));
        }
      }, 100);
      this._timers.push(timer);
    });
  }
};
export {
  StrikeWallet
};
//# sourceMappingURL=esm-JLSP764S.js.map
